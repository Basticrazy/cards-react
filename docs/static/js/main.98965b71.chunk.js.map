{"version":3,"sources":["components/Contador.jsx","components/Card.jsx","components/Cards.jsx","App.js","reportWebVitals.js","index.js"],"names":["Contador","inicial","factor","React","useState","contador","setContador","type","className","onClick","event","actual","Card","lang","url","fcolor","scolor","style","background","src","alt","color","fontSize","WebkitBackgroundClip","Cards","map","elemento","index","App","saludo","etiquetaSuma","elementoCompletoReact","createElement","elementoCompletoBabel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAkBaA,EAAW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAAa,EAEbC,IAAMC,SAASH,GAFF,mBAEtCI,EAFsC,KAE5BC,EAF4B,KAa7C,OACI,gCACI,4CAAc,4BAAID,OAClB,uBAOA,wBAAQE,KAAK,SAASC,UAAU,kCAAkCC,QAdnD,SAACC,GACpBJ,EAAYD,EAAWH,IAanB,uBACA,wBAAQK,KAAK,SAASC,UAAU,8BAA8BC,QApBhD,SAACC,GAEnBJ,GAAY,SAACK,GAAD,OAAYA,EAAST,MAkB7B,0BCZGU,G,MAlBK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAEtC,OACI,sBAAKC,MAAO,CAAEC,WAAW,mBAAD,OAAqBF,EAArB,YAA+BD,EAA/B,MAA4CP,UAAU,WAA9E,UACI,qBAAKW,IAAKL,EAAKM,IAAG,UAAKP,EAAL,UAClB,oBAAII,MAAO,CAAEI,MAAO,cAAeH,WAAW,mBAAD,OAAqBH,EAArB,YAA+BC,EAA/B,KAA0CM,SAAU,OAAQC,qBAAsB,QAA/H,SAA0IV,SCiCvIW,EA/CM,WA8BjB,OAII,aAHA,CAGA,qBAhCS,CACT,CACI,KAAQ,SACR,IAAO,2CACP,OAAU,UACV,OAAU,WAEd,CACI,KAAQ,OACR,IAAO,yCACP,OAAU,UACV,OAAU,WAEd,CACI,KAAQ,QACR,IAAO,0CACP,OAAU,UACV,OAAU,WAEd,CACI,KAAQ,OACR,IAAO,yCACP,OAAU,UACV,OAAU,YAYDC,KAAI,SAACC,EAAUC,GAChB,OAAO,cAAC,EAAD,CAAkBd,KAAMa,EAASb,KAAMC,IAAKY,EAASZ,IAAKC,OAAQW,EAASX,OAAQC,OAAQU,EAASV,QAAzFW,SCJvBC,G,MAhCH,WACV,IAAMC,EAAS,4CACTC,EAAe,4BAAI,IAIrBC,EAAwB5B,IAAM6B,cAAc,MAAM,CAAEf,MAAQ,CAACI,MAAM,UAAYlB,IAAM6B,cAAc,IAAI,GAAG,2CAC1BH,EACAC,GAGhFG,EAAwB,sBAAKhB,MAAQ,CAACI,MAAM,UAApB,UACI,0DACCQ,EACAC,KAK3BzB,EAAW,sBAAKY,MAAQ,CAACI,MAAM,iBAApB,UACG,uFAA0D,WAA1D,mCAMA,cAAC,EAAD,CAAUpB,QAAS,EAAGC,OAAQ,OAGlD,OAAO,gCAAM+B,EAAuBF,EAAuB1B,EAAS,cAAC,EAAD,SCtBvD6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAASC,OAAO,cAAC,IAAMC,WAAP,UAAkB,cAAC,EAAD,MAA2BC,SAASC,eAAe,SAKrFb,M","file":"static/js/main.98965b71.chunk.js","sourcesContent":["/**La mejor forma de identificar a un componente, es asignandole a su extension de archivos un .jsx \r\n * Para simplificar la creacion de un snippet, podemos escribir rafc, los cuales nos entrega diferentes\r\n * opciones para poder crear un componente.\r\n * NOTA: Para hacer uso del snippet se necesita tener instalado la extension ES7 React/Redux/GraphQL/React-Native snippets.\r\n*/\r\nimport React, { useState } from 'react'; //Tambien podemos destructurarlo con import { useState } from 'react';\r\n\r\n/**export lo que hace, es ir creando un array dentro de Contador.jsx, para que luego podamos importar el componente\r\n * en otro archivo con destructuring, ejemplo:\r\n * -En este archivo colocamos: export const Contador = () => {...}\r\n * -Luego en otro archivo colocamos: import {\"Contador\"} from \"./Contador.jsx\"\r\n * NOTA: para importar un archivo no es necesario colocar su tipo de extension, por lo que .jsx se puede omitir.\r\n */\r\n\r\n/*Podemos destructurar el props en caso de que nos manden mas de uno.\r\n    Forma clasica: export const Contador = (props) => {...}\r\n    Destructuring: export const Contador = ({inicial, factor,...etc}) => {...}\r\n*/\r\nexport const Contador = ({ inicial, factor }) => {\r\n\r\n    const [contador, setContador] = React.useState(inicial);\r\n\r\n    const clickAumentar = (event) => {\r\n        //setContador((actual) => { return actual + 1 }); //Forma recomendada de modificar estados.\r\n        setContador((actual) => actual + factor); //Forma recomendada de modificar estados.\r\n    }\r\n\r\n    const clickDisminuir = (event) => {\r\n        setContador(contador - factor);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Contador: <i>{contador}</i></h1>\r\n            <hr />\r\n            {/*Utilizando bootstrap en jsx con className.\r\n              * m = margin.\r\n              * e = end o right.\r\n              * - = separacion para poner valores. Es como colocar el simbolo =\r\n              * 2 = cantidad de espacio de separacion para el me. Esto es como decir $spacer * .5 (ver documentacion de bootstrap para mas informacion)\r\n              */}\r\n            <button type=\"button\" className=\"btn btn-danger me-2 shadow-none\" onClick={clickDisminuir}>Disminuir</button>\r\n            <button type=\"button\" className=\"btn btn-success shadow-none\" onClick={clickAumentar}>Aumentar</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n/**Si colocamos export default Contador ya no sera necesario destructurarlo en el import de otro archivo para\r\n * poder utilizar este componente, es mÃ¡s, podemos colocarle el nombre que nosotros queramos, ejemplo:\r\n * -Estando en otro archivo: import MiContador from \"./Contador.jsx\"\r\n*/\r\nexport default Contador\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n/**PropTypes lo que nos permite es definir el tipo de dato que queramos que sean los props. */\r\nimport PropTypes from 'prop-types';\r\n\r\n/**Podemos importar archivos CSS de manera individual por cada componente.\r\n * NOTA: Como buena practica, el archivo CSS debe tener el mismo nombre del archivo .jsx a quien se lo vamos\r\n * a aplicar.\r\n */\r\nimport \"./Card.css\";\r\n\r\n\r\nexport const Card = ({ lang, url, fcolor, scolor }) => {\r\n\r\n    return (\r\n        <div style={{ background: `linear-gradient(${scolor},${fcolor})` }} className=\"div-card\">\r\n            <img src={url} alt={`${lang}.svg`} />\r\n            <h3 style={{ color: \"transparent\", background: `linear-gradient(${fcolor},${scolor})`, fontSize: \"72px\", WebkitBackgroundClip: \"text\" }}>{lang}</h3>\r\n        </div>\r\n    )\r\n};\r\n\r\n//Declaracion de propTypes. Los propTypes de declaran como JSON.\r\nCard.propTypes = {\r\n    lang: PropTypes.string, //Declaramos que lang debera ser String.\r\n    url: PropTypes.string, //Declaramos que url debera ser String.\r\n    fcolor: PropTypes.string, //Declaramos que fcolor debera ser String.\r\n    scolor: PropTypes.string //Declaramos que scolor debera ser String.\r\n};\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nexport const Cards = () => {\r\n\r\n    const data = [\r\n        {\r\n            \"lang\": \"Python\",\r\n            \"url\": \"https://cdn.svgporn.com/logos/python.svg\",\r\n            \"fcolor\": \"#00c3ff\",\r\n            \"scolor\": \"#ffff1c\"\r\n        },\r\n        {\r\n            \"lang\": \"Java\",\r\n            \"url\": \"https://cdn.svgporn.com/logos/java.svg\",\r\n            \"fcolor\": \"#D31027\",\r\n            \"scolor\": \"#EA384D\"\r\n        },\r\n        {\r\n            \"lang\": \"React\",\r\n            \"url\": \"https://cdn.svgporn.com/logos/react.svg\",\r\n            \"fcolor\": \"#000428\",\r\n            \"scolor\": \"#004e92\"\r\n        },\r\n        {\r\n            \"lang\": \"Perl\",\r\n            \"url\": \"https://cdn.svgporn.com/logos/perl.svg\",\r\n            \"fcolor\": \"#cc2b5e\",\r\n            \"scolor\": \"#753a88\"\r\n        }\r\n    ];\r\n\r\n\r\n    return (\r\n        /**<React.Fragment></React.Fragment> Hace que la etiqueta no se encierre en un div.\r\n         * Esto puede ser reemplado dejando las etiquetas vacias, ejemplo <> </>\r\n         */\r\n        <>\r\n            {\r\n                /**Para crear elementos de manera iterativa es necesario asignarle una key a traves de props. */\r\n                data.map((elemento, index) => {\r\n                    return <Card key={index} lang={elemento.lang} url={elemento.url} fcolor={elemento.fcolor} scolor={elemento.scolor} />\r\n\r\n                })\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react'; \nimport {Contador} from \"./components/Contador\";\nimport Cards from \"./components/Cards.jsx\";\nimport './App.css';\n\nconst App = () => {\n  const saludo = <h1>Hola Mundo</h1>;\n  const etiquetaSuma = <p>{2 + 5}</p>\n  //generalmente, si trabajamos sin Babel, se tiene que crear un objeto React.createElement para poder renderizar un\n  //elemento.\n  //Nota: Para que esto funcione se tendra que importar la libreria React con import React from 'react'; \n  let elementoCompletoReact = React.createElement(\"div\",{ style : {color:\"green\"} }, React.createElement(\"p\",{},\"Elemento creado con React.createElement\"),\n                                                                                      saludo, \n                                                                                      etiquetaSuma);\n\n  //Con Babel tenemos otra opcion que es escribir directamente las etiquetas.\n  let elementoCompletoBabel = <div style={ {color:\"orange\"} }>\n                                  <p >Elemento creado con Babel</p>\n                                  {saludo}\n                                  {etiquetaSuma}\n                              </div>\n  //Ambas formas de crear elementos (con React.createElement o con Babel), son de igualmente validas.\n\n  //LLamando un import. En este caso se llamo con <Contador/>\n  const contador = <div style={ {color:\"darkgoldenrod\"} }>\n                      <p>Elemento Contador importado con destructuring: import {'Contador'} from \"./components/Contador\"</p>\n                      {/**Los props nos permiten entregar valores a componentes a traves de JSON. Podemos ponerle el nombre\n                       * que nosotros queramos en la etiqueta, en este caso se llama inicial y factor.\n                       * NOTA: Para que esto funcione, el componente le tenemos que asignar un valor de entrada, Ej:\n                       *    export const Contador = (props) => {...}\n                      */}\n                      <Contador inicial={5} factor={3}/>\n                    </div>\n\n  return <div>{elementoCompletoBabel}{elementoCompletoReact}{contador}<Cards /></div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; \nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; //Aqui importamos el componente App del archivo ./App.js, el cual se encuentra en linea 5\n                         //de ./App.js\nimport reportWebVitals from './reportWebVitals'; //reportWebVitals viene a ser el reemplazo de service worker.\n                                                 //Para realizar un service worker se tiene que hacer otros pasos.\n\n/**<React.StrictMode> nos obliga a seguir las buenas practicas de react, y en caso de no cumplirlas nos mostrara un\nerror gigante en el navegador.h\n* <App /> hace referencia al componente App (const App = ()=>{}) importado en la linea 5 de este codigo.\n*/\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}